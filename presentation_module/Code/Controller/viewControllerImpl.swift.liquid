//
//  {{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Copyright © {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit

/// Класс c реализацией контроллера представления для модуля {{ module_info.name }}.
class {{ module_info.name }}ViewControllerImpl: UIViewController {

    /** Слушатель событий модуля {{ module_info.name }}. */
    private let moduleListener: ModuleEventListener
    
    /** Оповещатель событий модуля {{ module_info.name }}. */
    private let moduleSender: ModuleEventSender

    /** Слушатель событий представления модуля {{ module_info.name }}. */
    private let viewControllerListener: {{ module_info.name }}ViewControllerListener

    init(
        moduleListener: ModuleEventListener,
        moduleSender: ModuleEventSender,
        viewControllerListener: {{ module_info.name }}ViewControllerListener
    ) {
        self.moduleListener = moduleListener
        self.moduleSender = moduleSender
        self.viewControllerListener = viewControllerListener

        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

    override func viewDidLoad() {
        super.viewDidLoad()

        viewControllerListener.didEvent(.didLoadView)
    }

}

// MARK: - Реализация контроллера представления модуля {{ module_info.name }}.
extension {{ module_info.name }}ViewControllerImpl: {{ module_info.name }}ViewController {

    public func displayState(_ state: {{ module_info.name }}ViewControllerState) {
        // TODO: - Обработать новое состояние представления.
    }

}

// MARK: - Реализация модуля {{ module_info.name }}. 
extension {{ module_info.name }}ViewControllerImpl: {{ module_info.name }}Module {

    public var viewController: UIViewController { return self }

    public var listener: ModuleEventListener { return moduleListener }

    public var sender: ModuleEventSender { return moduleSender }

}